{"version":3,"sources":["webpack:///./src/contracts/contractToken.js","webpack:///./node_modules/core-js/modules/es.function.name.js","webpack:///./src/contracts/contractDao.js"],"names":["getName","tokenAddress","web3","eth","Contract","tokenAbi","tokenContract","methods","name","call","resp","successResult","failResult","getSymbol","symbol","allowance","toAddress","connectWallet","success","currentAccount","result","amount","fromWei","approve","inputValue","stringValue","toWei","toString","toLowerCase","send","from","console","log","transfer","getAccounts","accounts","balanceOf","account","store","state","myAccount","balance","totalSupply","tokenObj","DESCRIPTORS","FUNCTION_NAME_EXISTS","EXISTS","uncurryThis","defineProperty","f","FunctionPrototype","Function","prototype","functionToString","nameRE","regExpExec","exec","NAME","configurable","get","this","error","contractInstance","daoAbi","config","daoAddress","createDao","params","lpAddress","daoAdd","daoEdit","daoAt","daoJoin","daoQuit","daoRemove","councliApply","councliAssign","address","councliQuit","proposalAdd","strParams","uintParams","mutilOption","options","proposalEdit","proposalAt","proposalFinsh","proposalRemove","vote","lp","amounts","voteFinsh","daoList","daoDetail","daos","userDaoList","daoExist","userDao","councliAt","userCouncli","daoCouncliList","counclisDetail","index","lpToTokenPrice","price","prosalList","proposalDetail","daoProposals","voteRecord","count","voteRecordList","offset","userVoteRecordQuery","voteRecordResolve","concat"],"mappings":"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","file":"js/chunk-f9c753da.25942307.js","sourcesContent":["import web3 from '../utils/web3'\nimport tokenAbi from '../abi/token.json'\nimport store from '@/store'\n\n/**\n *\n * @param {tokenAddress} 合约地址\n * @returns name\n */\nconst getName = async (tokenAddress) => {\n  const tokenContract = await new web3.web3.eth.Contract(tokenAbi, tokenAddress)\n  try {\n    const resp = await tokenContract.methods.name().call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n *\n * @param {tokenAddress} 合约地址\n * @returns\n */\nconst getSymbol = async (tokenAddress) => {\n  const tokenContract = await new web3.web3.eth.Contract(tokenAbi, tokenAddress)\n  try {\n    const resp = await tokenContract.methods.symbol().call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n *  allowance, 授权dex使用币的额度\n * @tokenAdree 交易代币\n * @toAddress 授权地址\n * @return 额度\n */\nconst allowance = async (tokenAddress, toAddress) => {\n  const resp = await web3.connectWallet()\n  if (!resp.success) return\n  const currentAccount = resp.result\n  const tokenContract = await new web3.web3.eth.Contract(tokenAbi, tokenAddress)\n  try {\n    var amount = await tokenContract.methods\n      .allowance(currentAccount, toAddress)\n      .call()\n    amount = web3.fromWei(amount)\n    return web3.successResult(amount)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * approveContract 授权dex使用币\n * *@tokenAdree 交易代币\n * @toAddress 授权地址\n * @param inputValue 输入的数量(默认很大---一次性授权，避免重复授权)\n */\nconst approve = async (\n  tokenAddress,\n  toAddress,\n  inputValue = 10000000000000000000\n) => {\n  const resp = await web3.connectWallet()\n  if (!resp.success) return\n  const currentAccount = resp.result\n  const stringValue = web3.toWei(inputValue)\n  const tokenContract = await new web3.web3.eth.Contract(tokenAbi, tokenAddress)\n  try {\n    const resp = await tokenContract.methods\n      .approve(toAddress.toString().toLowerCase(), stringValue)\n      .send({\n        from: currentAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    console.log(error)\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 转账\n * @fromAddress 当前地址\n * @toAddress 目的地址\n * @value 数额\n * @tokenAddress 代币地址\n */\nconst transfer = async (toAddress, amount, tokenAddress) => {\n  const accounts = await web3.web3.eth.getAccounts()\n  amount = web3.toWei(amount)\n  const tokenContract = await new web3.web3.eth.Contract(tokenAbi, tokenAddress)\n  try {\n    const resp = await tokenContract.methods\n      .transfer(toAddress, amount)\n      .send({ from: accounts[0] })\n    console.log(resp)\n    return web3.successResult(resp)\n  } catch (err) {\n    console.log(err)\n    return web3.failResult(err)\n  }\n}\n\n/**\n * 查询某个账号的代币余额\n * @param {contractAddress} 币种合约\n * @param {currentAccount} 账户地址\n * @returns 代币数量\n */\n\nconst balanceOf = async (tokenAddress, account) => {\n  const currentAccount = store.state.myAccount\n  const tokenContract = await new web3.web3.eth.Contract(tokenAbi, tokenAddress)\n  try {\n    var balance = await tokenContract.methods\n      .balanceOf(account || currentAccount)\n      .call({})\n    balance = web3.fromWei(balance)\n    return web3.successResult(balance)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 查询某个账号的总流通量\n * @param {contractAddress} 币种合约地址\n * @returns 代币总流通数量\n */\n\nconst totalSupply = async (tokenAddress) => {\n  const tokenContract = await new web3.web3.eth.Contract(tokenAbi, tokenAddress)\n  try {\n    var balance = await tokenContract.methods.totalSupply().call({})\n    balance = web3.fromWei(balance)\n    return web3.successResult(balance)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\nconst tokenObj = {\n  getName,\n  getSymbol,\n  allowance,\n  approve,\n  transfer,\n  balanceOf,\n  totalSupply\n}\n\nexport default tokenObj\n","var DESCRIPTORS = require('../internals/descriptors');\nvar FUNCTION_NAME_EXISTS = require('../internals/function-name').EXISTS;\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar FunctionPrototype = Function.prototype;\nvar functionToString = uncurryThis(FunctionPrototype.toString);\nvar nameRE = /function\\b(?:\\s|\\/\\*[\\S\\s]*?\\*\\/|\\/\\/[^\\n\\r]*[\\n\\r]+)*([^\\s(/]*)/;\nvar regExpExec = uncurryThis(nameRE.exec);\nvar NAME = 'name';\n\n// Function instances `.name` property\n// https://tc39.es/ecma262/#sec-function-instances-name\nif (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {\n  defineProperty(FunctionPrototype, NAME, {\n    configurable: true,\n    get: function () {\n      try {\n        return regExpExec(nameRE, functionToString(this))[1];\n      } catch (error) {\n        return '';\n      }\n    }\n  });\n}\n","import web3 from '../utils/web3'\nimport store from '@/store'\nimport daoAbi from '../abi/dao.json'\nimport config from '../config/app.config'\n\nconst contractInstance = new web3.web3.eth.Contract(daoAbi, config.daoAddress)\n/** **   start ***** */\n/** **   //////////////////////// */\n\n// dao组织相关\n/**\n *\n * @param string[] calldata params\n * string[]\n * logo: params[0],\n * nameCn: params[1],\n * nameEn: params[2],\n * descCn: params[3],\n * descEn: params[4],\n * twittter: params[5],\n * telegram: params[6],\n * discord: params[7],\n * website: params[8]\n * @param  address token\n * @param  address lp 0\n * @returns\n * @tips ---- 注意注意\n * 调用此方法之前要进行授权，，，token授权\n */\nconst createDao = async (\n  params,\n  tokenAddress,\n  lpAddress = 0x0000000000000000000000000000000000000000\n) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .daoAdd(params, tokenAddress, lpAddress)\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * dao编辑\n * daoEdit\n * @returns\n */\nconst daoEdit = async (\n  daoAt,\n  params,\n  tokenAddress,\n  lpAddress = 0x0000000000000000000000000000000000000000\n) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .daoEdit(daoAt, params, tokenAddress, lpAddress)\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * 加入dao\n * daoJoin\n * @param unit16 daoAt\n */\nconst daoJoin = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods.daoJoin(daoAt).send({\n      from: store.state.myAccount\n    })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 退出dao\n * daoQuit\n * @param unit16 daoAt\n */\nconst daoQuit = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods.daoQuit(daoAt).send({\n      from: store.state.myAccount\n    })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 移除dao --- 解散\n * only owner\n * 可能用不到\n * daoRemove\n * @param unit16 daoAt\n */\nconst daoRemove = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods.daoRemove(daoAt).send({\n      from: store.state.myAccount\n    })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n// 理事相关\n\n/**\n * councliApply\n * 加入理事\n * @address 地址\n * @daoAt dao id\n *\n */\n\nconst councliApply = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .councliApply(daoAt)\n      .send({ from: store.state.myAccount })\n\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * councliAssign\n *\n * @address 地址\n * @daoAt dao id\n *\n */\n\nconst councliAssign = async (daoAt, address) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .councliAssign(daoAt, address)\n      .send({ from: store.state.myAccount })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 退出理事\n * councliQuit\n * @param unit16 daoAt\n */\nconst councliQuit = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods.councliQuit(daoAt).send({\n      from: store.state.myAccount\n    })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n// 提案相关\n/**\n * 发起提案\n * proposalAdd\n * @daoAt dao Id (index)\n * @strParams string[]\n * daoAt: daoAt,\n name: strParams[0],\n desc: strParams[1],\n content: uint8(uintParams[0]),\n label: uint8(uintParams[1]),\n reward: uintParams[2],\n startTime: uint32(uintParams[3]),\n endTime: uint32(uintParams[4]),\n mutilOption: mutilOption,\n options: options,\n votes: new uint256[](options.length),\n totalVote: 0,\n initiate: msg.sender,\n frozenAmount: frozenAmount,\n status: 10\n * @uintParams uint256[]\n * @mutilOption bool\n * @options string[]\n * @returns\n * tips: 发起提案时如果当前用户不是【理事】需要质押总供应量0.1%的代币才可以成功发起提案，\n * 如果是【理事】则不需要质押可直接发起提案。\n * 要进行授权操作\n */\n\nconst proposalAdd = async (\n  daoAt,\n  strParams,\n  uintParams,\n  mutilOption,\n  options\n) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .proposalAdd(daoAt, strParams, uintParams, mutilOption, options)\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 提案编辑\n * proposalEdit\n * @param proposalAt 提案id\n * @returns\n */\nconst proposalEdit = async (\n  daoAt,\n  proposalAt,\n  strParams,\n  uintParams,\n  mutilOption,\n  options = []\n) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .proposalEdit(\n        daoAt,\n        proposalAt,\n        strParams,\n        uintParams,\n        mutilOption,\n        options\n      )\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * 提案结束\n * proposalFinsh\n * @param daoAt\n * @param proposalAt 提案id\n * @returns\n */\nconst proposalFinsh = async (daoAt, proposalAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .proposalFinsh(daoAt, proposalAt)\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 提案删除\n * proposalRemove\n * @param daoAt\n * @param proposalAt 提案id\n * @returns\n */\nconst proposalRemove = async (daoAt, proposalAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .proposalRemove(daoAt, proposalAt)\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 投票\n * vote\n * @param daoAt\n * @param proposalAt\n * @param lp bool\n * @param options []\n * @param amounts []\n * @returns\n */\nconst vote = async (daoAt, proposalAt, lp, options, amounts) => {\n  console.log('options', options)\n  console.log('amounts', amounts)\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .vote(daoAt, proposalAt, lp, options, amounts)\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 用户赎回\n * voteFinsh\n * @param daoAt\n * @param proposalAt\n * @returns\n */\nconst voteFinsh = async (daoAt, proposalAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .voteFinsh(daoAt, proposalAt)\n      .send({\n        from: store.state.myAccount\n      })\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/** **   //////////////////////// */\n/** **   end ***** */\n\n/** **   start ***** */\n/** **   //////////////////////// */\n/**\n * 获取dao列表\n * daoList\n * @returns daos\n * @daos  daos.push(\n *  Dao({\n * logo: params[0],\n * nameCn: params[1],\n * nameEn: params[2],\n * descCn: params[3],\n * descEn: params[4],\n * twittter: params[5],\n * telegram: params[6],\n * discord: params[7],\n * token: token,\n * lp: lp,\n * memberCount: 1,\n * status: true\n * })\n *  Councli({\n * addr: msg.sender, //\n *  frozen: frozenAmount\n * status: true\n * })\n * );\n */\nconst daoList = async () => {\n  try {\n    const resp = await contractInstance.methods.daoList().call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * dao详情信息\n * daos\n * @daoAt\n * @returns {}\n */\nconst daoDetail = async (daoAt) => {\n  try {\n    const resp = await contractInstance.methods.daos(daoAt).call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * 我的dao列表\n */\nconst userDaoList = async () => {\n  const accounts = await web3.web3.eth.getAccounts()\n  try {\n    const resp = await contractInstance.methods\n      .userDaoList(accounts[0])\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 获取某个token是否存在dao\n * @token address\n * @returns bool\n */\nconst daoExist = async (tokenAddress = store.state.myAccount) => {\n  try {\n    const resp = await contractInstance.methods.daoExist(tokenAddress).call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * userDao\n * 判断用户是否加入过某个dao\n * @address 地址\n * @daoAt dao id\n */\nconst userDao = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .userDao(store.state.myAccount, daoAt)\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * councliAt\n * 判断用户是否为某个DAO理事  65535===false\n * @address 地址\n * @daoAt dao id\n *\n */\n\nconst councliAt = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    let resp = await contractInstance.methods\n      .councliAt(daoAt, store.state.myAccount)\n      .call({})\n    if (+resp === 65535) {\n      resp = false\n    }\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * userCouncli\n * 判断用户是否为某个DAO理事  65535===false\n * @address 地址\n * @daoAt dao id\n *\n */\n\nconst userCouncli = async (daoAt) => {\n  await web3.connectWallet()\n  try {\n    let resp = await contractInstance.methods\n      .userCouncli(daoAt, store.state.myAccount)\n      .call({})\n    if (+resp === 65535) {\n      resp = false\n    }\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/***\n * daoCouncliList\n * 获取某个dao的理事列表\n * @daoAt\n * @returns []\n */\nconst daoCouncliList = async (daoAt) => {\n  try {\n    const resp = await contractInstance.methods.daoCouncliList(daoAt).call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/***\n * 理事详情\n * daoCounclis\n * @param daoAt\n * @param index\n * @returns {\n * addr,frozen,status\n * }\n */\nconst counclisDetail = async (daoAt, index) => {\n  try {\n    const resp = await contractInstance.methods\n      .counclisDetail(daoAt, index)\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n/**\n * lpToTokenPrice\n */\nconst lpToTokenPrice = async (lpAddress, tokenAddress) => {\n  try {\n    const resp = await contractInstance.methods\n      .lpToTokenPrice(lpAddress, tokenAddress)\n      .call({})\n    const price = web3.fromWei(resp)\n    console.log('price', price)\n    return web3.successResult(price)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n// // 提案列表\n\n// 提案详情\n// 提案相关\n/**\n * 提案列表\n * prosalList\n * @param {uint16} daoAt\n * @returns []\n */\nconst prosalList = async (daoAt) => {\n  try {\n    const resp = await contractInstance.methods.prosalList(daoAt).call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/**\n * 提案详情\n * @param daoAt dao ID\n * @param index 列表下标\n */\nconst proposalDetail = async (daoAt, index) => {\n  try {\n    const resp = await contractInstance.methods\n      .daoProposals(daoAt, index)\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/** **   //////////////////////// */\n/** **   end ***** */\n\n/** 投票 start */\n\n/***\n * voteRecord\n * @param {daoAt}\n * @param {proposalAt}\n * @param {addr}\n * @param {count}\n * @returns []\n */\nconst voteRecord = async (daoAt, proposalAt, count) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .voteRecord(daoAt, proposalAt, store.state.myAccount, count)\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/***\n * voteRecordList\n * @param {daoAt}\n * @param {proposalAt}\n * @param {offset}\n * @param {count}\n * @returns []\n */\nconst voteRecordList = async (daoAt, proposalAt, offset, count) => {\n  try {\n    const resp = await contractInstance.methods\n      .voteRecordList(daoAt, proposalAt, offset, count)\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/** * 用户投票过的列表\n * voteRecordList\n * @returns []\n */\nconst userVoteRecordQuery = async () => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .userVoteRecordQuery(store.state.myAccount)\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/** * 用户投票过的列表\n * voteRecordList\n * @concat 为userVoteRecordQuery返回的值\n * @returns []\n */\nconst voteRecordResolve = async (concat) => {\n  await web3.connectWallet()\n  try {\n    const resp = await contractInstance.methods\n      .voteRecordResolve(concat)\n      .call({})\n    return web3.successResult(resp)\n  } catch (error) {\n    return web3.failResult(error)\n  }\n}\n\n/** 投票 end */\nexport default {\n  createDao,\n  daoEdit,\n  daoJoin,\n  daoQuit,\n  daoRemove,\n  proposalAdd,\n  proposalEdit,\n  vote,\n  proposalFinsh,\n  proposalRemove,\n  councliApply, // 理事申请\n  councliAssign,\n  councliQuit, // 理事退出\n  voteFinsh,\n  userCouncli, // 判断是否为理事\n  // /////////\n  daoList, // 所有\n  userDaoList, // 某用户\n  daoDetail, // dao详情\n  daoExist, // dao-存在\n  userDao, // 用户是否在dao里面\n  lpToTokenPrice, // lp-token换算\n  councliAt, // 用户是否是理事\n  daoCouncliList, // dao---理事列表\n  counclisDetail, // dao---理事详情\n  prosalList, // dao---提案列表\n  proposalDetail, // dao---提案详情\n  voteRecord, // 提案投票记录\n  voteRecordList,\n  userVoteRecordQuery,\n  voteRecordResolve\n}\n"],"sourceRoot":""}